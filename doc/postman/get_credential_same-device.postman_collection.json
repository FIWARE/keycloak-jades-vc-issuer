{
	"info": {
		"_postman_id": "9ec79ecd-2a43-47ac-9fe5-c0b846a08072",
		"name": "Keycloak OID4VC Get VC Same-Device",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12955180"
	},
	"item": [
		{
			"name": "Get well-known",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/realms/{{realm}}/.well-known/openid-credential-issuer",
					"host": [
						"{{host}}"
					],
					"path": [
						"realms",
						"{{realm}}",
						".well-known",
						"openid-credential-issuer"
					]
				}
			},
			"response": []
		},
		{
			"name": "0. Get user login bearer token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"const token = jsonData.access_token;",
							"pm.collectionVariables.set(\"access_token\", token);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "grant_type",
							"value": "password",
							"type": "text"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "text"
						},
						{
							"key": "client_secret",
							"value": "{{login-client-secret}}",
							"type": "text"
						},
						{
							"key": "client_id",
							"value": "{{login-client-id}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{host}}/realms/{{realm}}/protocol/openid-connect/token",
					"host": [
						"{{host}}"
					],
					"path": [
						"realms",
						"{{realm}}",
						"protocol",
						"openid-connect",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "1. Get credential offer URI",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"const issuer = jsonData.issuer;",
							"pm.collectionVariables.set(\"credential_offer_issuer\", issuer);",
							"",
							"const nonce = jsonData.nonce;",
							"pm.collectionVariables.set(\"credential_offer_nonce\", nonce);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					}
				],
				"url": {
					"raw": "{{host}}/realms/{{realm}}/protocol/oid4vc/credential-offer-uri?credential_configuration_id={{credential_type_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"realms",
						"{{realm}}",
						"protocol",
						"oid4vc",
						"credential-offer-uri"
					],
					"query": [
						{
							"key": "credential_configuration_id",
							"value": "{{credential_type_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "2. Get credential offer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"const issuer = jsonData.credential_issuer;",
							"pm.collectionVariables.set(\"credential_issuer\", issuer);",
							"",
							"const code = jsonData[\"grants\"][\"urn:ietf:params:oauth:grant-type:pre-authorized_code\"][\"pre-authorized_code\"];",
							"pm.collectionVariables.set(\"pre-authorized_code\", code);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					}
				],
				"url": {
					"raw": "{{credential_offer_issuer}}/{{credential_offer_nonce}}",
					"host": [
						"{{credential_offer_issuer}}"
					],
					"path": [
						"{{credential_offer_nonce}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "3. Get issuer metadata",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"const auth_servers = jsonData.authorization_servers;",
							"const server = auth_servers[0];",
							"pm.collectionVariables.set(\"authorization_server\", server);",
							"",
							"const endpoint = jsonData.credential_endpoint;",
							"pm.collectionVariables.set(\"credential_endpoint\", endpoint);",
							"",
							"const type_id = pm.collectionVariables.get(\"credential_type_id\");",
							"const credential_format = jsonData[\"credential_configurations_supported\"][type_id][\"format\"];",
							"pm.collectionVariables.set(\"credential_type_format\", credential_format);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{credential_issuer}}/.well-known/openid-credential-issuer",
					"host": [
						"{{credential_issuer}}"
					],
					"path": [
						".well-known",
						"openid-credential-issuer"
					]
				}
			},
			"response": []
		},
		{
			"name": "4. Get OID Config",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"const token_endpoint = jsonData.token_endpoint;",
							"pm.collectionVariables.set(\"token_endpoint\", token_endpoint);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{authorization_server}}/.well-known/openid-configuration",
					"host": [
						"{{authorization_server}}"
					],
					"path": [
						".well-known",
						"openid-configuration"
					]
				}
			},
			"response": []
		},
		{
			"name": "5. Get access token for code",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"const token = jsonData.access_token;",
							"pm.collectionVariables.set(\"credential_access_token\", token);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "grant_type",
							"value": "urn:ietf:params:oauth:grant-type:pre-authorized_code",
							"type": "text"
						},
						{
							"key": "code",
							"value": "{{pre-authorized_code}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{token_endpoint}}",
					"host": [
						"{{token_endpoint}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "6. Get VC",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"/**const credential = jsonData.credential;",
							"",
							"let [jwtHeader, jwtPayload, jwtSignature] = credential.split('.')",
							"",
							"function decode(x) {",
							"    let wordArray = CryptoJS.enc.Base64.parse(x);",
							"    let str = CryptoJS.enc.Utf8.stringify(wordArray);",
							"    return JSON.parse(str);",
							"}",
							"",
							"console.log(\"Header:â€¯\", decode(jwtHeader));",
							"console.log(\"Payload: \", decode(jwtPayload));**/"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{credential_access_token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"format\": \"{{credential_type_format}}\",\n    \"credential_identifier\": \"{{credential_type_id}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{credential_endpoint}}",
					"host": [
						"{{credential_endpoint}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "realm",
			"value": "oid4vc-test",
			"type": "string"
		},
		{
			"key": "username",
			"value": "test-user",
			"type": "string"
		},
		{
			"key": "password",
			"value": "test",
			"type": "string"
		},
		{
			"key": "login-client-id",
			"value": "login-client",
			"type": "string"
		},
		{
			"key": "login-client-secret",
			"value": "pR1d6PbbKeUfJTLDs3ksHeYqdSXt9Udv",
			"type": "string"
		},
		{
			"key": "access_token",
			"value": "abc",
			"type": "string"
		},
		{
			"key": "credential_type_id",
			"value": "verifiable-credential",
			"type": "string"
		},
		{
			"key": "credential_offer_issuer",
			"value": ""
		},
		{
			"key": "credential_offer_nonce",
			"value": ""
		},
		{
			"key": "credential_issuer",
			"value": ""
		},
		{
			"key": "authorization_server",
			"value": ""
		},
		{
			"key": "pre-authorized_code",
			"value": ""
		},
		{
			"key": "token_endpoint",
			"value": ""
		},
		{
			"key": "credential_access_token",
			"value": ""
		},
		{
			"key": "credential_endpoint",
			"value": ""
		},
		{
			"key": "credential_type_format",
			"value": ""
		}
	]
}